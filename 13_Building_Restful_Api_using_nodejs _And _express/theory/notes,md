
# REST API with Node.js & Express.js ‚Äî Study Notes

## üìå 1. Project Initialization & Dependencies
- **Initialize Project**:  
  `npm init` creates a `package.json` to manage metadata and dependencies.
- **Install Express.js**:  
  `npm install express` installs the web framework used to build the API.

> ‚úÖ *Quote:* ‚Äúnpm init correct because I want to initialise a new project... we need Express... so let's install `npm install express`.‚Äù

---

## ‚öôÔ∏è 2. Basic Server Setup with Express
- **Require Express & Create App**:
  ```js
  const express = require("express");
  const app = express();
  const port = 8000;
  ```
- **Start Server**:
  ```js
  app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  });
  ```

> ‚úÖ *Quote:* ‚Äú...require express... create app... make a port... then console log.‚Äù

---

## üîÅ 3. Designing RESTful Endpoints
**CRUD Operations on `/api/users`**:
- `GET /api/users` ‚Äì Fetch all users  
- `GET /api/users/:id` ‚Äì Fetch user by ID  
- `POST /api/users` ‚Äì Add new user  
- `PATCH /api/users/:id` ‚Äì Edit existing user  
- `DELETE /api/users/:id` ‚Äì Remove user

> ‚úÖ *Quote:* ‚ÄúWe are designing a RESTful API... routes will support JSON data.‚Äù

---

## üß™ 4. Using Mock Data for Testing
- **Mockaroo.com** is used to generate fake user data (1000 entries).
- Common fields: `id`, `first_name`, `last_name`, `email`, `gender`, `job_title`
- Data is stored in a separate file and imported into the app.

> ‚úÖ *Quote:* ‚ÄúWe have not connected MongoDB... we will hardcode data... using Mockaroo.com.‚Äù

---

## üì§ 5. Implementing GET Routes
- **Return All Users**:
  ```js
  app.get("/api/users", (req, res) => {
    res.json(users);
  });
  ```

- **Get User by ID (Dynamic Params)**:
  ```js
  app.get("/api/users/:id", (req, res) => {
    const id = Number(req.params.id);
    const user = users.find(u => u.id === id);
    res.json(user);
  });
  ```

> ‚úÖ *Quote:* ‚ÄúIn Express, colon ID means dynamic... access using `req.params.id`.‚Äù

---

## üåê 6. Hybrid Server Concept
- **Serve Both HTML and JSON**:
  - `/users` ‚Üí HTML content  
  - `/api/users` ‚Üí JSON data  
- Helps serve frontend and backend from one server (e.g., for web + mobile apps).

> ‚úÖ *Quote:* ‚ÄúYour server is basically a hybrid server... `/users` for browser, `/api/users` for API consumers.‚Äù

---

## üîÅ 7. Other HTTP Methods & Route Grouping
- **POST, PATCH, DELETE** need tools like **Postman** (browser can‚Äôt natively send them).
- Use `app.route()` to group handlers for the same path:
  ```js
  app.route("/api/users/:id")
    .get((req, res) => { /* ... */ })
    .patch((req, res) => { /* ... */ })
    .delete((req, res) => { /* ... */ });
  ```

> ‚úÖ *Quote:* ‚ÄúUse `app.route()` to avoid repeating paths... POST can‚Äôt be tested in browser.‚Äù

---

## üîç 8. Key Technical Notes
| Topic                      | Details                                                                 |
|---------------------------|-------------------------------------------------------------------------|
| Project Name              | `project-01`                                                            |
| Express Version           | 4.18.2                                                                  |
| Mock Data Tool            | [Mockaroo.com](https://mockaroo.com)                                    |
| Server Port               | 8000                                                                    |
| Dynamic Path Params       | `req.params.id`                                                         |
| Type Conversion           | Convert `req.params.id` to `Number()` before comparing with mock data   |
| JSON Response             | `res.json(data)`                                                        |
| HTML Response             | `res.send(html)`                                                        |
| Generate HTML Lists       | Use `map()` + `join('')`                                                |

---

## üìå 9. Next Steps (As per Transcript)
- Install and configure **Postman**
- Test **POST**, **PATCH**, **DELETE** endpoints
- Create documentation in Postman

---

## üß† Conclusion
This lesson introduces the **foundational elements of building a RESTful API** using **Node.js and Express.js**, covering:
- Project setup
- Routing & HTTP methods
- Mock data usage
- Dynamic parameters
- The **Hybrid Server** model
- Route grouping for cleaner code

It sets the stage for more advanced operations with API testing tools like **Postman** and eventually integrating a database (e.g., MongoDB).
